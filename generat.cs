//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.42000
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BTest.Turing_namespace
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.ComponentModel;
    using System.Diagnostics;
    using System.Linq;
    using NMF.Expressions;
    using NMF.Expressions.Linq;
    using NMF.Models;
    using NMF.Models.Collections;
    using NMF.Models.Expressions;
    using NMF.Collections.Generic;
    using NMF.Collections.ObjectModel;
    using NMF.Serialization;
    using NMF.Utilities;
    using NMF.Models.Meta;
    using NMF.Models.Repository;
    
    
    /// <summary>
    /// The default implementation of the State class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("http://org.alan/")]
    [XmlNamespacePrefixAttribute("org.alan")]
    [ModelRepresentationClassAttribute("http://org.alan/#//State/")]
    [DebuggerDisplayAttribute("State {Name}")]
    public class State : ModelElement, IState, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        private string _name;
        
        /// <summary>
        /// The backing field for the NextState property
        /// </summary>
        private IState _nextState;
        
        private static IClass _classInstance;
        
        /// <summary>
        /// The name property
        /// </summary>
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public virtual string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e);
                }
            }
        }
        
        /// <summary>
        /// The nextState property
        /// </summary>
        [XmlElementNameAttribute("nextState")]
        [XmlAttributeAttribute(true)]
        public virtual IState NextState
        {
            get
            {
                return this._nextState;
            }
            set
            {
                if ((this._nextState != value))
                {
                    IState old = this._nextState;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNextStateChanging(e);
                    this.OnPropertyChanging("NextState", e);
                    this._nextState = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetNextState;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetNextState;
                    }
                    this.OnNextStateChanged(e);
                    this.OnPropertyChanged("NextState", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new StateReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://org.alan/#//State/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the NextState property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NextStateChanging;
        
        /// <summary>
        /// Gets fired when the NextState property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NextStateChanged;
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NextStateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNextStateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NextStateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NextStateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNextStateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NextStateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the NextState property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetNextState(object sender, System.EventArgs eventArgs)
        {
            this.NextState = null;
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "NEXTSTATE"))
            {
                this.NextState = ((IState)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "NextState"))
            {
                return new NextStateProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "NextState"))
            {
                return new NextStateProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://org.alan/#//State/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the State class
        /// </summary>
        public class StateReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private State _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public StateReferencedElementsCollection(State parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.NextState != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.NextStateChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.NextStateChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.NextState == null))
                {
                    IState nextStateCasted = item.As<IState>();
                    if ((nextStateCasted != null))
                    {
                        this._parent.NextState = nextStateCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.NextState = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.NextState))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.NextState != null))
                {
                    array[arrayIndex] = this._parent.NextState;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.NextState == item))
                {
                    this._parent.NextState = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.NextState).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<IState, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(IState modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NameChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the nextState property
        /// </summary>
        private sealed class NextStateProxy : ModelPropertyChange<IState, IState>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NextStateProxy(IState modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IState Value
            {
                get
                {
                    return this.ModelElement.NextState;
                }
                set
                {
                    this.ModelElement.NextState = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NextStateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.NextStateChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The default implementation of the simpleTuring class
    /// </summary>
    [XmlNamespaceAttribute("http://org.alan/")]
    [XmlNamespacePrefixAttribute("org.alan")]
    [ModelRepresentationClassAttribute("http://org.alan/#//simpleTuring/")]
    public class SimpleTuring : ModelElement, ISimpleTuring, IModelElement
    {
        
        /// <summary>
        /// The backing field for the HeadPosition property
        /// </summary>
        private object _headPosition;
        
        /// <summary>
        /// The backing field for the States property
        /// </summary>
        private ObservableCompositionOrderedSet<IState> _states;
        
        /// <summary>
        /// The backing field for the CurrentState property
        /// </summary>
        private IState _currentState;
        
        private static IClass _classInstance;
        
        public SimpleTuring()
        {
            this._states = new ObservableCompositionOrderedSet<IState>(this);
            this._states.CollectionChanging += this.StatesCollectionChanging;
            this._states.CollectionChanged += this.StatesCollectionChanged;
        }
        
        /// <summary>
        /// The headPosition property
        /// </summary>
        [XmlElementNameAttribute("headPosition")]
        [XmlAttributeAttribute(true)]
        public virtual object HeadPosition
        {
            get
            {
                return this._headPosition;
            }
            set
            {
                if ((this._headPosition != value))
                {
                    object old = this._headPosition;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnHeadPositionChanging(e);
                    this.OnPropertyChanging("HeadPosition", e);
                    this._headPosition = value;
                    this.OnHeadPositionChanged(e);
                    this.OnPropertyChanged("HeadPosition", e);
                }
            }
        }
        
        /// <summary>
        /// The states property
        /// </summary>
        [UpperBoundAttribute(11)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [XmlElementNameAttribute("states")]
        [XmlAttributeAttribute(false)]
        [ContainmentAttribute()]
        [ConstantAttribute()]
        public virtual IOrderedSetExpression<IState> States
        {
            get
            {
                return this._states;
            }
        }
        
        /// <summary>
        /// The currentState property
        /// </summary>
        [XmlElementNameAttribute("currentState")]
        [XmlAttributeAttribute(true)]
        public virtual IState CurrentState
        {
            get
            {
                return this._currentState;
            }
            set
            {
                if ((this._currentState != value))
                {
                    IState old = this._currentState;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCurrentStateChanging(e);
                    this.OnPropertyChanging("CurrentState", e);
                    this._currentState = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetCurrentState;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetCurrentState;
                    }
                    this.OnCurrentStateChanged(e);
                    this.OnPropertyChanged("CurrentState", e);
                }
            }
        }
        
        /// <summary>
        /// Gets the child model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> Children
        {
            get
            {
                return base.Children.Concat(new SimpleTuringChildrenCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new SimpleTuringReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets the Class model for this type
        /// </summary>
        public new static IClass ClassInstance
        {
            get
            {
                if ((_classInstance == null))
                {
                    _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://org.alan/#//simpleTuring/")));
                }
                return _classInstance;
            }
        }
        
        /// <summary>
        /// Gets fired before the HeadPosition property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HeadPositionChanging;
        
        /// <summary>
        /// Gets fired when the HeadPosition property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> HeadPositionChanged;
        
        /// <summary>
        /// Gets fired before the CurrentState property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentStateChanging;
        
        /// <summary>
        /// Gets fired when the CurrentState property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CurrentStateChanged;
        
        /// <summary>
        /// Raises the HeadPositionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHeadPositionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HeadPositionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the HeadPositionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnHeadPositionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.HeadPositionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the States property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void StatesCollectionChanging(object sender, NMF.Collections.ObjectModel.NotifyCollectionChangingEventArgs e)
        {
            this.OnCollectionChanging("States", e);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the States property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void StatesCollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("States", e);
        }
        
        /// <summary>
        /// Raises the CurrentStateChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentStateChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentStateChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CurrentStateChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCurrentStateChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CurrentStateChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the CurrentState property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetCurrentState(object sender, System.EventArgs eventArgs)
        {
            this.CurrentState = null;
        }
        
        /// <summary>
        /// Gets the relative URI fragment for the given child model element
        /// </summary>
        /// <returns>A fragment of the relative URI</returns>
        /// <param name="element">The element that should be looked for</param>
        protected override string GetRelativePathForNonIdentifiedChild(IModelElement element)
        {
            int statesIndex = ModelHelper.IndexOfReference(this.States, element);
            if ((statesIndex != -1))
            {
                return ModelHelper.CreatePath("states", statesIndex);
            }
            return base.GetRelativePathForNonIdentifiedChild(element);
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "STATES"))
            {
                if ((index < this.States.Count))
                {
                    return this.States[index];
                }
                else
                {
                    return null;
                }
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "HEADPOSITION"))
            {
                return this.HeadPosition;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "STATES"))
            {
                return this._states;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "CURRENTSTATE"))
            {
                this.CurrentState = ((IState)(value));
                return;
            }
            if ((feature == "HEADPOSITION"))
            {
                this.HeadPosition = ((object)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "CurrentState"))
            {
                return new CurrentStateProxy(this);
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "CurrentState"))
            {
                return new CurrentStateProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            if ((_classInstance == null))
            {
                _classInstance = ((IClass)(MetaRepository.Instance.Resolve("http://org.alan/#//simpleTuring/")));
            }
            return _classInstance;
        }
        
        /// <summary>
        /// The collection class to to represent the children of the simpleTuring class
        /// </summary>
        public class SimpleTuringChildrenCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SimpleTuring _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SimpleTuringChildrenCollection(SimpleTuring parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.States.Count);
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.States.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.States.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IState statesCasted = item.As<IState>();
                if ((statesCasted != null))
                {
                    if ((this._parent.States.Count < 11))
                    {
                        this._parent.States.Add(statesCasted);
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.States.Clear();
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.States.Contains(item))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> statesEnumerator = this._parent.States.GetEnumerator();
                try
                {
                    for (
                    ; statesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = statesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    statesEnumerator.Dispose();
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IState stateItem = item.As<IState>();
                if (((stateItem != null) 
                            && this._parent.States.Remove(stateItem)))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.States).GetEnumerator();
            }
        }
        
        /// <summary>
        /// The collection class to to represent the children of the simpleTuring class
        /// </summary>
        public class SimpleTuringReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private SimpleTuring _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public SimpleTuringReferencedElementsCollection(SimpleTuring parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    count = (count + this._parent.States.Count);
                    if ((this._parent.CurrentState != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.States.AsNotifiable().CollectionChanged += this.PropagateCollectionChanges;
                this._parent.CurrentStateChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.States.AsNotifiable().CollectionChanged -= this.PropagateCollectionChanges;
                this._parent.CurrentStateChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                IState statesCasted = item.As<IState>();
                if ((statesCasted != null))
                {
                    if ((this._parent.States.Count < 11))
                    {
                        this._parent.States.Add(statesCasted);
                    }
                }
                if ((this._parent.CurrentState == null))
                {
                    IState currentStateCasted = item.As<IState>();
                    if ((currentStateCasted != null))
                    {
                        this._parent.CurrentState = currentStateCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.States.Clear();
                this._parent.CurrentState = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if (this._parent.States.Contains(item))
                {
                    return true;
                }
                if ((item == this._parent.CurrentState))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                IEnumerator<IModelElement> statesEnumerator = this._parent.States.GetEnumerator();
                try
                {
                    for (
                    ; statesEnumerator.MoveNext(); 
                    )
                    {
                        array[arrayIndex] = statesEnumerator.Current;
                        arrayIndex = (arrayIndex + 1);
                    }
                }
                finally
                {
                    statesEnumerator.Dispose();
                }
                if ((this._parent.CurrentState != null))
                {
                    array[arrayIndex] = this._parent.CurrentState;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                IState stateItem = item.As<IState>();
                if (((stateItem != null) 
                            && this._parent.States.Remove(stateItem)))
                {
                    return true;
                }
                if ((this._parent.CurrentState == item))
                {
                    this._parent.CurrentState = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.States).Concat(this._parent.CurrentState).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the headPosition property
        /// </summary>
        private sealed class HeadPositionProxy : ModelPropertyChange<ISimpleTuring, object>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public HeadPositionProxy(ISimpleTuring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override object Value
            {
                get
                {
                    return this.ModelElement.HeadPosition;
                }
                set
                {
                    this.ModelElement.HeadPosition = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HeadPositionChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.HeadPositionChanged -= handler;
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the currentState property
        /// </summary>
        private sealed class CurrentStateProxy : ModelPropertyChange<ISimpleTuring, IState>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CurrentStateProxy(ISimpleTuring modelElement) : 
                    base(modelElement)
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override IState Value
            {
                get
                {
                    return this.ModelElement.CurrentState;
                }
                set
                {
                    this.ModelElement.CurrentState = value;
                }
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be subscribed to the property change event</param>
            protected override void RegisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentStateChanged += handler;
            }
            
            /// <summary>
            /// Registers an event handler to subscribe specifically on the changed event for this property
            /// </summary>
            /// <param name="handler">The handler that should be unsubscribed from the property change event</param>
            protected override void UnregisterChangeEventHandler(System.EventHandler<NMF.Expressions.ValueChangedEventArgs> handler)
            {
                this.ModelElement.CurrentStateChanged -= handler;
            }
        }
    }
    
    /// <summary>
    /// The public interface for simpleTuring
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(SimpleTuring))]
    [XmlDefaultImplementationTypeAttribute(typeof(SimpleTuring))]
    public interface ISimpleTuring : IModelElement
    {
        
        /// <summary>
        /// The headPosition property
        /// </summary>
        object HeadPosition
        {
            get;
            set;
        }
        
        /// <summary>
        /// The states property
        /// </summary>
        IOrderedSetExpression<IState> States
        {
            get;
        }
        
        /// <summary>
        /// The currentState property
        /// </summary>
        IState CurrentState
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the HeadPosition property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HeadPositionChanging;
        
        /// <summary>
        /// Gets fired when the HeadPosition property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> HeadPositionChanged;
        
        /// <summary>
        /// Gets fired before the CurrentState property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CurrentStateChanging;
        
        /// <summary>
        /// Gets fired when the CurrentState property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CurrentStateChanged;
    }
    
    /// <summary>
    /// The public interface for State
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(State))]
    [XmlDefaultImplementationTypeAttribute(typeof(State))]
    public interface IState : IModelElement
    {
        
        /// <summary>
        /// The name property
        /// </summary>
        string Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The nextState property
        /// </summary>
        IState NextState
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the NextState property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NextStateChanging;
        
        /// <summary>
        /// Gets fired when the NextState property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NextStateChanged;
    }
}
